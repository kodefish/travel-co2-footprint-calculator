* Transportation Mode Classification Detection
** Schedule
*** 06.11
**** DONE Data Extraction
***** DONE Utility function that extracts data of all sensors given a =user= and a =leg=
**** DONE Write Visualisation Pipeline
***** DONE Dashboard to select data and plot it
**** TODO Data Analysis
***** TODO Denoising
***** TODO Fourier Transform -> some kind of periodicity
***** TODO Extract useful features and optimal window size(s)
*** 13.11
**** TODO App Frontend
***** TODO MVP UI
***** TODO Interaction with ML backend (decision tree only)
***** TODO Wireframes for MVP and final UX/UI (final should contain the additional things we want to do on top of MVP)
**** TODO App Backend
***** TODO Footprint calculator (still need to define the API for this)
***** TODO Database to store sensor readings for statistics
**** TODO ML Pipeline and training
***** TODO Data preprocessing based on the previously deterimned features
***** TODO Decision Tree classification
*** 20.11
**** TODO Implement final app wireframes
**** TODO Refine decision tree + app (solve any issues/bugs)
** MVP
*** Features and functionalities (scope)
**** Start/Stop journey (via slider)
**** Display currently used mode of transport
**** Option to get feedback on performance
**** Share trip/progress -> comptetion
**** End of trip summary
***** Distance travelled
***** Total time elapsed
***** CO2 footprint
***** Calories burned/grade maybe?
***** Most prevalent detected mode of transportation
**** Summary over time (statistics) of performance and travels
***** DB & API we can call
**** Notification with information about current journey
*** Wireframe
#+CAPTION: Wireframe of MVP app
#+NAME: fig-mvp-app-wireframe
 [[./dox/imgs/mvp_wireframe.jpeg]]
** Usage
*** Data visualization
Data processing and visualization is done via python scripts. In order to have
everything working, you must have the following dependencies installed:

+ =bokeh=: visualization library
+ =pandas=: processing and querying csv data
+ =tqdm=: displaying a progress bar

You can install all these packages using =conda=:
#+BEGIN_SRC
conda install bokeh pandas tqdm
#+END_SRC

**** Data Processing
To visualize the data, first process it. This can be done using the
=process_data.py= script. It will parse the =legs.csv= folder, extract all the
user ids, then ask which user you would like to process. Then it will ask which
journey of the selected user you would like to process. You can of course both
times say all.

It will then output the sensor data in one csv file per user and per journey, in
the =processed_data= folder (which will be created if necessary). This folder
follows the following hierarchy:

+ =./processed_data=
  + =user_id=
    + =leg_id=
      + =acc_readings.csv==
      + =bluetooth_scans.csv==
      + =gyro_readings.csv==
      + =locations_scans.csv==
      + =magn_readings.csv==
      + =wifi_scans.csv==
       
**** Data Visualization
Once the data has been processes, visualizing it can be done via the
=visualization.py= script. The script will first ask which user's journey and
which journey in particular you want to see. It will then plot the data from
each sensor into a separate figure. You have the option to visualize the plots
in a column layout, grid layout or both (default). This can be specified as command line
arguments.

+ =-c= or =-column= to view column layout
+ =-g= or =-grid= to view grid layout

The script will open the generated plots in a new browser tab. You can play
around (pan and zoom) with the graph in the grid mode (for some reason, tools are not available
yet in the column view).
